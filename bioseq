#!/usr/bin/env perl

use strict;    # Still on 5.10, so need this for strict
use warnings;
use FindBin;                      # Find the location of seq-manipulations
use lib "$FindBin::Bin/lib";          # to use it as a lib path
require "SeqManipulations.pm";    # to get this library!
use 5.010;
use Getopt::Long qw(:config gnu_getopt);
use Pod::Usage;

################################################################################
# Option parsing
################################################################################
my %opts;
GetOptions(
    \%opts,
    "man|m",
    "help|h",
    "input|i=s",
    "output|o=s",
    "length|l",
    "numseq|n",
    "revcom|r",
    "pick|p=s",
    "del|d=s",
    "translate|t=i", #Needs error checking
    "nogaps|g",
    "composition|c",
    "fetch|f=s" # Retrieve sequence by accession number
    "subseq|s=s",
    "anonymize|A:10",    # default 10 char (for phylip) (prefix + num_digits)  
    "break|B", 
    "reloop|P=i", # recircularize a genome at "loop_at"
    "linearize|L",
    "removestop|X", # for PAML/codeml    
    "leadgaps|G",
 #   "longest-orf|C", Retired for now
 #   "extract|e", Retired for now
 #   "dotplot|D=s", Retired for now
 #   "rename|N=s",  Retired for now
 #   "slidingwindow|S=i", Retired for now
 #   "prefix=s",   Retired for now
 #   "split|S=i", Retired for now

 
) or pod2usage(2);

pod2usage(1) if $opts{"help"};
pod2usage( -exitstatus => 0, -verbose => 2 ) if $opts{"man"};

################################################################################
# Main
################################################################################

# This sets all internal variables, and loads SeqIO objects
initialize( \%opts);

for my $option ( keys %opts ) {

    # Don't process these options: they are for SeqIO
    next if ( ( $option eq 'input' ) || ( $option eq 'output' ) );

    # If there is a function to handle the current option, execute it
    if ( can_handle($option) ) {
        handle_opt($option);
        exit;
    }
    else {
        warn "Missing handler for: $option\n";
    }
}

# Let seq-manipulations act as a converter when no other options are given.
write_out();

################# POD Documentation ##################

__END__

=head1 NAME

bioseq - Fasta sequence editing module based on BioPerl.

=head1 SYNOPSIS

B<bioseq> [options] [sequence file]

=head1 DESCRIPTION

B<bioseq> will read a sequence file and act upon it by doing the following - reformat input (default is 
fasta) to Genbank or EMBL formats, delete specified sequences, generate overlapping subsequence with a specified window size, generate the reverese complementary sequence, for nucleic acid sequences only, take input list of sequences apart into individual sequence files,
extract a specified subset of the sequence, linearize the sequence, remove gaps, find the longest open reading frame (ORF), remove stop codons, give percentage composition of specified amino acids or nuclic acid bases, split the sequences as specified by the user, translate a specific frame of input sequence, or extract a specific gene ID from multiple file sequences. By default, B<bioseq> will assume
that both the input and the output are in FASTA format.

=head1 OPTIONS

=over 4

=item B<--help, -h>

Print a brief help message and exit.

	Usage: bioseq -h <keyword>

=item B<--man, -m>

Prints the manual page and exit.

	Usage: bioseq -m <keyword> 

=item B<--input, -i> 'format'

Input file format. By default, this is 'fasta'. For Genbank format, use 'genbank'. For EMBL format, use 'embl'.

	Usage: bioseq -i 'genbank' input_file

=item B<--output, -o> 'format'

Output file format. By default, this is 'fasta'.For Genbank format, use 'genbank'. For EMBL format, use 'embl'.

	Usage: bioseq -o 'EMBL' input_file

=item B<--numseq, -n>

Print number of sequences specified by n.

	Usage: bioseq -n input_file

=item B<--subseq, -s> 'min,max'

Select substring (of 1st sequence), 

	Usage: bioseq -s '<beginning index>, <ending index>' input_file

        Example:  bioseq -s'20,80' input_file (or --sub'20,80' or -s='20,80' or --sub='20,80')

=item B<--length, -l>

Print all sequence lengths.

	Usage: bioseq -l

=item B<--leadgaps, -G>

Count and return the number of leading gaps in each sequence.

	Usage: bioseq -G

=item B<--reloop, -P>

Assuming a circular genome (e.g., pseudomonas)

	Usage: bioseq -reloop 1000

=item B<--pick, -p> 'tag:value'

Select a single sequence or a comma-separated list of sequences, e.g,
 --pick 'id:foo'        by id
 --pick 'order:2'       by order
 --pick 're:REGEX'      using a regular expression (only one regex is expected)

Specifically for a list of sequences,
 --pick 'id:foo,bar'    list by id
 --pick 'order:2,3'     list by order
 --pick 'order:2-10'    list by range

	Usage: bioseq -p 'id:<number>' input_file

=item B<--del, -d> 'tag:value'

 Delete a sequence or a comma-separated list of sequences, eg,
 --del 'id:foo'		by id
 --del 'order:2'	by order
 --del 'length:n'	by min length, where 'n' is length
 --del 'ambig:x'	by min % ambiguous base/aa, where 'x' is the %
 --del 'id:foo,bar'	list by id
 --del 're:REGEX'       using a regular expression (only one regex is expected)

	Usage: bioseq --del 'id:<number>' input_file

=item B<--revcom, -r>

Reverse complement

	Usage: bioseq -r input_file

=item B<--translate, -t> [1|3|6]

Translate in 1, 3, or 6 frames. eg, -t1, -t3, or -t6.

	Usage: bioseq -t3 input_file

=item B<--break, -B>

Shred into individual sequences

	Usage: bioseq -B input_file

=item B<--linearize, -L>

Linearize FASTA.

	Usage: bioseq -L fasta_file

=item B<--nogaps, -g>

Remove gaps

	Usage: bioseq -g input_file

=item B<--removestop, -X>

Remove stop codons (for e.g., PAML input)

	Usage: bioseq -X input_file

=item B<--anonymize, -A> 'n'

Replace sequence IDs with serial IDs 'n' characters long, including a leading 'S' (e.g., -a'5' gives S0001).
Produces a sed script file with a '.sed' suffix that may be used with sed's '-f' argument.
If the filename is '-', the sed file is named STDOUT.sed instead.
The sed filename is specified on STDERR.

	Usage: bioseq -A <number> input_file


=item B<--composition, -c>

Base or AA composition.

	Usage: bioseq -c input_file

=item B<--fetch, -f> 'sequence retriever using GenBank accession'

    Usage: bioseq -f [Accession]
    Retrieves the sequence from GenBank using the provided GenBank accession. Prints out text in a fasta file.

  EXAMPLE:
    
    bioseq -f 'X83553' -o 'genbank' (if want in genbank format; default is Fasta output)
    
  OUTPUT:

    >X83553 B.garinii (PHei strain) opsC gene.
    ATGAAAAAGAATACATTAAGTGCGATATTAATGACTTTATTTTTATTTATATCTTGTAAT
    AATTCAGGTGGGGATACTGCATCTACTAATCCTGATGAGTCTGCGAAAGGACCTAATCTT
    ATAGAAATAAGCAAAAAAATTACAGATTCTAATGCATTTGTACTGGCTGTGAAAGAAGTT
    GAGGCTTTGATCTCATCTATAGATGAACTTGCTAATAAAGCTATTGGTAAAAAAATAAAT
    CAAAATGGTTTAGATGCTGATGCTAATCACAACGGATCATTGTTAGCAGGAGCCCATGCA
    ATATCAACTCTAATAAAACAAAAAACAGATGGATTGAAAGATCTAGAAGGGTTAAGTAAA
    GAAATTGCAAAGGTGAAGGAATGTTCCGATAAATTTACTAAAAAGCTAACAGATAGTCAT
    GCACAGCTTGGAGCAGTTGGTGGTGCTATTAATGATGATCGTGCAAAAGAAGCTATTTTA
    AAAACACATGGGACTAACGATAAGGGTGCTAAAGAACTTAAAGAGTTATCTGAATCAGTA
    GAAAGCTTGGCAAAAGCAGCTCAAGCAGCATTAGCTAATTCAGTTAAAGAGCTTACAAGT
    CCTGTTGTGGCAGAAAGTCCAAAAAAACCTTAA

=back

=head1 REQUIRES

Perl 5.010, BioPerl

=head1 SEE ALSO

  perl(1)

=head1 AUTHORS

 Weigang Qiu at genectr.hunter.cuny.edu
 Yözen Hernández yzhernand at gmail dot com
 Levy Vargas levy dot vargas at gmail dot com

=cut

##################### End ##########################
