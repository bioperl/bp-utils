#!/usr/bin/env perl

use strict;    # Still on 5.10, so need this for strict
use warnings;
use FindBin;                      # Find the location of seq-manipulations
use lib "$FindBin::Bin/lib";          # to use it as a lib path
require "SeqManipulations.pm";    # to get this library!
use 5.010;
use Getopt::Long qw(:config gnu_getopt);
use Pod::Usage;

################################################################################
# Option parsing
################################################################################
my %opts;
GetOptions(
    \%opts,
    "man|m",
    "help|h",
    "input|i=s",
    "output|o=s",
    "length|l",
    "numseq|n",
    "revcom|r",
    "pick|p=s",
    "delete|d=s",
    "translate|t=i", #Needs error checking
    "nogaps|g",
    "composition|c",
    "fetch|f=s", # Retrieve sequence by accession number
    "subseq|s=s",
    "anonymize|A:10",    # default 10 char (for phylip) (prefix + num_digits)  
    "break|B", 
    "reloop|R=i", # recircularize a genome at "loop_at"
    "linearize|L",
    "removestop|X", # for PAML/codeml    
    "leadgaps|G",
    "count-codons|C",
    "feat2fas|F",
    "hydroB|H"
 #   "longest-orf|C", Retired for now
 #   "extract|e", Retired for now
 #   "dotplot|D=s", Retired for now
 #   "rename|N=s",  Retired for now
 #   "slidingwindow|S=i", Retired for now
 #   "prefix=s",   Retired for now
 #   "split|S=i", Retired for now

 
) or pod2usage(2);

pod2usage(1) if $opts{"help"};
pod2usage( -exitstatus => 0, -verbose => 2 ) if $opts{"man"};

################################################################################
# Main
################################################################################

# This sets all internal variables, and loads SeqIO objects
initialize( \%opts);

for my $option ( keys %opts ) {

    # Don't process these options: they are for SeqIO
    next if ( ( $option eq 'input' ) || ( $option eq 'output' ) );

    # If there is a function to handle the current option, execute it
    if ( can_handle($option) ) {
        handle_opt($option);
        exit;
    }
    else {
        warn "Missing handler for: $option\n";
    }
}

# Let seq-manipulations act as a converter when no other options are given.
write_out();

__END__

################# POD Documentation ##################

=pod

=head1 NAME

=over

=item B<bioseq> - FASTA sequence utility based on BioPerl.

=back

=head1 SYNOPSIS

 # FASTA descriptors:
 bioseq -l fasta_file             # [l]engths of sequences
 bioseq -n fasta_file             # [n]umber of sequences
 bioseq -c fasta_file             # base or aa [c]omposition of sequences

 # FASTA filters (FASTA in FASTA out) - one or more sequences:
 bioseq -r fasta_file             # [r]everse-complement sequences
 bioseq -p'order:3' fasta_file    # [p]ick the 3rd sequences
 bioseq -p're:B31' fasta_file     # [p]ick sequences with regex
 bioseq -d'order:3' fasta_file    # [d]elete the 3rd sequences
 bioseq -d're:B31' fasta_file     # [d]elete sequences with regex
 bioseq -t1 dna_fasta             # [t]ranslate in 1st reading frame
 bioseq -t3 dna_fasta             # [t]ranslate in 3 reading frames
 bioseq -t6 dna_fasta             # [t]ranslate in 6 reading frames
 bioseq -g fasta_file             # remove [g]aps
 bioseq -A fasta_file             # [A]nonymize sequence IDs

 # FASTA filters (FASTA in FASTA out) - single sequence:
 bioseq -s'1,10' fasta_file       # [s]ubsequence from positions 1-10
 bioseq -R'10' bac_genome_fasta   # [R]e-circularize a genome t position 10

 # Retrieve sequence from database
 bioseq -f 'X83553' -o 'genbank'  # [f]etch a genbank file by accession
 bioseq -f 'X83553' -o 'fasta'    # [f]etch a genbank file in FASTA

 # Less common usages (options in CAPs)
 bioseq -L fasta_file             # [L]inearize FASTA: one sequence per line
 bioseq -B fasta_file             # [B]reak into single-seq files
 bioseq -X cds_fasta              # remove stop[X] codon in coding seqs (for PAML)
 bioseq -C cds_fasta              # [C]odon counts (for coding sequences)
 bioseq -H pep_fasta              # [H]ydrophobicity score (for protein seq)
 bioseq -i'genbank' -F file.gb    # extract genbank [F]eatures to FASTA

 # Chaining with pipes:
 bioseq -p'id:B31' dna_fasta | bioseq -g | bioseq -t1          # pick a seq, remove gaps, & translate 
 bioseq -p'order:2' dna_fasta | bioseq -r | bioseq -s'10,20'   # pick the 2nd seq, rev-com it, & subseq

=head1 DESCRIPTION

B<bioseq> is a command-line utility for common, routine sequence manipulations. Most methods are wrappers for BioPerl modules (Bio::Seq, Bio::SeqIO, Bio::SeqUtils, and Bio::Tools::SeqStats). By default, B<bioseq> assumes that both the input and the output files are in FASTA format, to facilitate the chainning (by UNIX pipes) of multiple B<bioseq> runs.

Methods that are currently NOT wrappers should ideally be factored into individual BioPerl modules, which are better tested and handle exceptions better than stand-alone codes in bp-utils. As a design principle, bp-utils should consist of ONLY wrapper calls.

=head1 OPTIONS

=head2 --help, -h

Print a brief help message and exit.

Usage: bioseq -h

=head2 --man, -m

Print the manual page and exit.

Usage: bioseq -m

=head2 --composition, -c

Base or AA composition. A wrapper for Bio::Tools::SeqStats->count_monomers().

Usage: bioseq -c <input_file>

=head2 --delete, -d

 Delete a sequence or a comma-separated list of sequences, eg,
 --del 'id:foo'		by id
 --del 'order:2'	by order
 --del 'length:n'	by min length, where 'n' is length
 --del 'ambig:x'	by min % ambiguous base/aa, where 'x' is the %
 --del 'id:foo,bar'	list by id
 --del 're:REGEX'       using a regular expression (only one regex is expected)

Usage: bioseq -d 'tag:value' <input_file>

=head2 --fetch, -f

Retrieves a sequence from GenBank using the provided accession number. A wrapper for Bio::DB::GenBank->get_Seq_by_acc().

Usage: bioseq -f <genbank_accession>

=head2 --nogaps, -g

Remove gaps

Usage: bioseq -g <input_file>

=head2 --input, -i

Input file format. By default, this is 'fasta'. For Genbank format, use 'genbank'. For EMBL format, use 'embl'. Wrap Bio::SeqIO.

Usage: bioseq -i 'format' <input_file>

=head2 --length, -l

Print all sequence lengths. Wrap Bio::Seq->length().

Usage: bioseq -l <input_file>

=head2 --numseq, -n. 

Print number of sequences.

Usage: bioseq -n <input_file>

=head2 --output, -o

Output file format. By default, this is 'fasta'. For Genbank format, use 'genbank'. For EMBL format, use 'embl'. Wrap Bio::SeqIO.

Usage: bioseq -o 'format' <input_file>

=head2 --pick, -p

Select a single sequence:
 --pick 'id:foo'        by id
 --pick 'order:2'       by order
 --pick 're:REGEX'      using a regular expression

Select a list of sequences:
 --pick 'id:foo,bar'    list by id
 --pick 'order:2,3'     list by order
 --pick 'order:2-10'    list by range

Usage: bioseq -p 'tag:value' <input_file>

=head2 --revcom, -r

Reverse complement. Wrap Bio::Seq->revcom().

Usage: bioseq -r <input_file>

=head2 --subseq, -s

Select substring (of the 1st sequence). Wrap Bio::Seq->subseq().

Usage: bioseq -s 'beginning_index, ending_index' <input_file>

Example:  bioseq -s'20,80' <input_file> (or -s='20,80')

=head2 --translate, -t

Translate in 1, 3, or 6 frames. eg, -t1, -t3, or -t6. Wrap Bio::Seq->translate(), Bio::SeqUtils->translate_3frames(), and Bio::SeqUtils->translate_6frames().

Usage: bioseq -t [1|3|6] <input_file>

=head2 --anonymize, -A

Replace sequence IDs with serial IDs 'n' characters long, including a leading 'S' (e.g., -A'5' gives S0001). Produces a sed script file with a '.sed' suffix that may be used with sed's '-f' argument.
If the filename is '-', the sed file is named STDOUT.sed instead. The sed filename is specified on STDERR.

Usage: bioseq -A 'number' <input_file>

=head2 --break, -B

Break into individual sequences, one sequence per file

Usage: bioseq -B <input_file>

=head2 --count-codons, -C

Count codons for coding sequences (e.g., a genome file consisting of CDS sequences). A wrapper of Bio::Tools::SeqStats->count_codons().

Usage: bioseq -C <input_file>

=head2 --feat2fasta, -F

Extract gene sequences in FASTA from a GenBank file of bacterial genome. Won't work for a eukaryote genbank file.

Usage: bioseq -i'genbank' -F <genbank_file>

=head2 --leadgaps, -G

Count and return the number of leading gaps in each sequence.

Usage: bioseq -G <input_file>

=head2 --hydroB, -H

Return the mean Kyte-Doolittle hydropathicity for protein sequences. A wrapper of Bio::Tools::SeqStats->hydrophobicity().

Usage: bioseq -G <input_file>

=head2 --linearize, -L

Linearize FASTA, one sequence per line

Usage: bioseq -L <input_file>

=head2 --reloop, -R

Re-circularize a bacterial genome by starting at a specified position, e.g. for sequence "ABCDE", bioseq -R'2' would generate 'BCDEA'.

Usage: bioseq -R 'number' <input_file>

=head2 --removestop, -X

Remove stop codons (e.g., PAML input)

Usage: bioseq -X <input_file>

=head1 REQUIRES

Perl 5.010, BioPerl

=head1 FEEDBACK

=head2 Support

Please see project wiki page https://github.com/bioperl/bp-utils/wiki for documentation and use cases.

=head2 Report bugs & Contribute

Please email weigang@genectr.hunter.cuny.edu.

=head1 CONTRIBUTORS

 Yozen Hernandez <yzhernand at gmail dot com>
 Girish Ramrattan <gramratt at gmail dot com>
 Levy Vargas <levy dot vargas at gmail dot com>
 Weigang Qiu <weigang at genectr dot hunter dot cuny dot edu> (Maintainer)

=cut

##################### End ##########################
