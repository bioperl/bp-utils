#!/usr/bin/env perl
use strict;
use warnings;
use Bio::BPWrapper::TreeManipulations;
use Bio::BPWrapper::GetoptLong qw(:config gnu_getopt);
use Pod::Usage;

####################### Option parsing ######################
pod2usage(1) if scalar(@ARGV) < 1;
my %opts;
GetOptions(\%opts,
	   "help|h",
	   "man",
	   "distance|d=s",
	   "input|i:s",
	   "length|l",
	   "numOTU|n",
	   "output|o:s",
	   "reroot|r=s",
	   "subset|s=s",
	   "otu|u",
	   "lca|A=s",
	   "labelnodes|B",
	   "distanceall|D",
	   "ltt|G=s",
	   "lengthall|L",
	   "random|M:i",
	   "depth|P=s",
	   "rmbl|R",
	   "allchildOTU|U=s",
	   "version|V",
	   "walk|W=s",
	   "multi2bi",
	   "cleanbr",
	   "cleanboot",
	   "delete-otus=s",
	   "sis-pairs", # pairwise OTU togetherness
	   "swap-otus=s", # output trees with each possible pairs (with the designated one) swapped
	   "ead", # edge-length abundance distribution; ODwyer et al. PNAS (2015)
	   "tree-shape", # for apTreeshape
	   #    "bootclean|b:f",
	   #    "collapse|c=s@",
	   #    "getroot|g",
	   #    "prune|p=s@",
	   #    "compnames|x",
#	   "collabel|C:s",
#	   "tree2tableid|I:s",
#	   "joindata|J=s@",
#	   "rename|N",
#	   "tree2table|T",
	   #    "comptrees|X",
	  ) or pod2usage(2);

pod2usage(1) if $opts{"help"};
pod2usage(-exitstatus => 0, -verbose => 2) if $opts{"man"};
print_version() if $opts{"version"};

# Create a new BioTree object and initialize that.
unshift @ARGV, \%opts;
initialize(@ARGV);
write_out(\%opts);

################# POD Documentation ##################
__END__

=head1 NAME

=over

=item B<biotree> - Fasta tools based on BioPerl

=back

=head1 SYNOPSIS

B<biotree> [options] <tree file>

=head1 OPTIONS

=head2 --help, -h

Print a brief help message and exits.

=head2 --man

Print the manual page and exits.

=head2 --distance, -d 'node1' -d 'node2'

Prints the distance between a pair of nodes or leaves.

=head2 --input, -i 'format'

Input file format. Accepts newick and nhx.

=head2 --length, -l

Print total branch length.

=head2 --numOTU, -n

Print total number of OTUs (leaves).

=head2 --output, -o 'format'

Output file format. Accepts newick, nhx, and tabtree.

=head2 --reroot, -r 'newroot'

Reroot tree to specified node by creating new branch.

=head2 --subset, -s 'node1,node2,node3'

Creates a tree of only the specified leaves/nodes and their descendants. Specifying a single internal node produces a subtree from that node.

=head2 --otu, -u

Print leaf nodes with branch lengths.

=head2 --lca, -A 'node1,node2,node3,...'

Returns ID of most recent common ancestor across provided nodes. Returns direct ancestor if single leaf/node provided.

=head2 --labelnodes, -B

Prepends ID to each leaf/node label. Useful when identifying unlabed nodes, such as when using --prune.

=head2 --distanceall, -D

Prints half-matrix list of distances between ALL leaves.

=head2 --ltt, -G 'number_of_bins'

Linear through time. Divides tree into number of specified segments and counts branches up to height the segment. Returns: bin_number, branch_count, bin_floor, bin_ceiling.

=head2 --lengthall, -L

Prints all nodes and branch lengths.

=head2 --random, -M [sample_size]

Builds a tree of a random subset of the original tree's OTUs. Defults to selecting half of the original tree's nodes.

=head2 --depth, -P 'node' [-D 'node'] [-D 'node']...

Prints depth to root. Accepts node names and/or IDs.

=head2 --rmbl, -R

Remove branch lengths from tree.

=head2 --allchildOTU, -U 'internal_node_id' | 'all'

Prints all OTU's that are descended from the given internal node. If no node is provided, a complete list of all internal nodes and their descendents is returned instead (given in the order of "walking" through the tree from the root node).

=head2 --version, -V

Print current release version of bp-utils.

Usage: bioseq -V

=head2 --walk, -W 'otu'

Walks along the tree starting from the specified OTU and prints the total distance traveled while reaching each other OTU. Does not count any segment more than once.

=head1 DESCRIPTION

B<biotree> will read a tree file and do reformating of branches
and nodes.

Trees can be in any format supported by Bio::TreeIO in BioPerl. However, tree-manipulations has not been tested on all possible formats, so behavior may be unexpected with some.

Currently, tree-manipulations does not support multiple trees per file or the ability to read from standard input.

=head1 REQUIRES

Perl 5.010, Getopt::Long, Pod::Usage, BioPerl

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

Yozen Hernandez, Pedro Pagan, Weigang Qiu

=cut

##################### End ##########################
