#!/usr/bin/env perl

use strict;
use warnings;
use FindBin;                      # Find the location of aln-manipulations
use lib "$FindBin::Bin/lib";          # to use it as a lib path
require "AlnManipulations.pm";    # to get this library!
use 5.010;
use Getopt::Long qw(:config gnu_getopt);
use Pod::Usage;

################################################################################
# Option parsing
################################################################################
my %opts;
GetOptions(
    \%opts,
    "help|h",
    "man",
    "avpid|a",
    "bootstrap|b=n",
    "codon-view|c:20",    # Optional value, default 20
    "delete|d=s",
    "nogaps|g", 
    "input|i=s",
    "length|l",
    "match|m",
    "numseq|n",
    "output|o=s",
    "pick|p=s",
    "refseq|r=s",
    "slice|s=s",
    "uniq|u",
    "varsites|v",    
    "window|w:30",
    "concat|A",
    "conblocks|B:6",    
    "consensus|C:50",
    "erasecol|E=s",
    "aln-index|I=s",
    "listids|L",
    "permute-states|M",
    "paml|P",    
    "resample|R:i",    # Optional value, default is floor of num_sequences/2
    "shuffle-sites|S",
    "third-sites|T",
    "uppercase|U", # make upper case (for DNAStatistics)
  #  "dnadist|D=s", # Needs fixing
  #  "noflatname|F", # Retired for now
  #  "inform|Z",    Retired for now
) or pod2usage(2);

pod2usage(1) if $opts{"help"};
pod2usage(-exitstatus => 0, -verbose => 2) if $opts{"man"};

################################################################################
# Main
################################################################################
# This sets all internal variables, and loads AlignIO objects
initialize(\%opts);

for my $option (keys %opts) {
    next if (($option eq 'input') || ($option eq 'output')); # Don't process these options: they are for AlignIO

    if (can_handle($option)) { handle_opt($option) } # If there is a function to handle the current option, execute it
    else { warn "Missing handler for: $option\n" }
}

write_out();

################# POD Documentation ############

__END__

=head1 NAME

=over

=item B<bioaln> - Alignment utility based on BioPerl

=back

=head1 SYNOPSIS

 # Alignment descriptors:
 bioaln -l aln_file                  # [l]ength of an alignment
 bioaln -n aln_file                  # [n]umber of aligned sequences
 bioaln -L aln_file                  # [L]ist all sequence IDs 
 bioaln -a input.aln                 # [a]verage percent identity
 bioaln -w '30' aln_file             # average identifies for sliding [w]indows of 30
 bioaln -I '' aln_file               # ?????

 # Alignment viewers:
 bioaln -m input.aln                 # [m]atch view (show variable sites)
 bioaln -c aln_file                  # [c]odon view (groups of 3 nts)

 # Alignment filters (produce a new alignment):
 bioaln -i 'fasta' fasta_aln_file    # [i]nput is a FASTA alignment (CLUSTALW is dafault)
 bioaln -o 'fasta' aln_file          # [o]utput a FASTA alignment (CLUSTALW is dafault)
 bioaln -g aln_file                  # remove [g]apped sites
 bioaln -s '10,20'                   # alignment [s]lice from 10-20
 bioaln -r 'seq_id' aln_file         # change [r]eference (1st) sequence
 bioaln -d 'Seq1,Seq2' aln_input     # [d]elete sequences
 bioaln -p 'Seq1, Seq2' aln_input    # [p]ick sequences
 bioaln -u aln_file                  # [u]nique-fy sequences (remove redundant seqs)
 bioaln -v aln_file                  # show only variable sites
 bioaln -C '90' aln_file             # add a 90% [C]onsensus sequence
 bioaln -E 'Seq5' input.aln          # [E]rase sites gapped at Seq5
 bioaln -U aln_file                  # turn into [U]pper-case

 # Evolutionary analysis:
 bioaln -B aln_file                  # extract conserved [B]locks
 bioaln -S aln_file                  # [S]huffle sites (for testing conserved blocks)
 bioaln -R '10' aln_file             # [R]e-sampled an alignment of 10 sequences
 bioaln -b aln_file                  # [b]ootstrap an alignment (for testing branch stability)
 bioaln -M aln_file                  # per[m]ute at each site (for testing tree-ness)
 bioaln -T aln_file                  # extract [T]hird site (assume coding sequences)

 # change alignment format:
 bioaln -i 'fasta' -o 'phylip'       # FASTA => PHYLIP
 bioaln -i 'fasta' -P 'pmal'         # FASTA => PAML (note not '-o')

 # Chaining with pipes:
 # Read a FASTA alignment, slice it, and calcualte percent identity:
 bioaln -i'fasta' fasta.aln | bioaln -s'10,20' | bioaln -a

 # Chaining with bioseq:
 # Turn a coding-sequence alignment into a protein alignemnt:
 bioaln -o'fasta' cds.aln | bioseq -t1 | bioaln -i'fasta'

=head1 DESCRIPTION

B<bioaln> performs common, routine manipulations of sequence alignments. By default, B<bioaln> assumes that both the input and the output files are in CLUSTALW format so that multiple B<bioaln> runs can be chained with UNIX pipes. Upper-case options are less commonly used.

=head1 OPTIONS and EXAMPLES

=head2 --help, -h

Print a brief help message and exit.

=head2 --avpid, -a

Calculate the average percent identity of an alignment. Returns the value alone.

Usage: bioaln -a <alignment_file>

=head2 --bootstrap, -b

Usage: bioaln -b <alignment_file>

=head2 --codon-view, -c

Print a CLUSTALW-like alignment, but separated by codons. Intended for use with DNA sequences. Block-final position numbers are printed at the end of every alignment block at the point of wrapping, and block-initial counts appear over first nucleotide in a block.

If invoked as --codon-view=n where n is some number, will print n codons per line. Other normally stackable options, such as -m, can be used alongside it. If piping through bioaln, ensure codon-view is used in the last invocation.

Usage: bioaln -c <alignment_file>

EXAMPLE: bioaln -c input_DNA.aln

INPUT:

 Seq1   ATGAATAAAAAGATATACAGCATAGAAGAATTAATAGATAAAATAAGC
 Seq2   ATGAATAATAAAATATACAGCATAGAAGAATTAATAGATAAAATAAGC
 Seq3   ATGAATAAAAAGATATATAGCATAGAAGAATTAGTAGATAAAATAAGT
 Seq4   ATGAATAAAAAAACATATAGCATAGAAGAATTAATAGATAAAATAAGT
 Seq5   ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAAATAAGC
 Seq6   ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAAATAAGT
        ******** ** * *** *************** **** ********

OUTPUT:
                                                                      4
        1                                                             8
 Seq1   ATG AAT AAA AAG ATA TAC AGC ATA GAA GAA TTA ATA GAT AAA ATA AGC
 Seq2   ATG AAT AAT AAA ATA TAC AGC ATA GAA GAA TTA ATA GAT AAA ATA AGC
 Seq3   ATG AAT AAA AAG ATA TAT AGC ATA GAA GAA TTA GTA GAT AAA ATA AGT
 Seq4   ATG AAT AAA AAA ACA TAT AGC ATA GAA GAA TTA ATA GAT AAA ATA AGT
 Seq5   ATG AAT AAA AAA ATA TAT AGC ATA GAA GAA TTA ATA GAC AAA ATA AGC
 Seq6   ATG AAT AAA AAA ATA TAT AGC ATA GAA GAA TTA ATA GAC AAA ATA AGT

=head2 --delete, -d
 
Delete sequences based on their id. Option takes a comma-separated list of ids.

Usage: bioaln -d 'seq_id_1, seq_id_2, ... , seq_id_n' <alignment_file>

=head2 --nogaps, -g

Remove gaps (and returns an de-gapped alignment).

Usage: bioaln -g <alignment_file>

=head2 --input, -i

Input file format (see Bio::AlignIO for supported formats). By default, this is 'clustalw'.

Usage: bioaln -i 'format'

=head2 --length, -l

Print alignment length.

Usage: bioaln -l <alignment_file>

=head2 --match, -m

Go through all columns and change residues identical to the reference sequence to be the match character, '.'

Usage: bioaln -m <alignment_file>

EXAMPLE: bioaln -m input.aln

INPUT:

 Seq1           ATGAATAAAAAGATATATAGCATAGAAGAATTAGTAGATAAA--ATAAGT
 Seq2           ATGAATAAAAAGATATACAGCATAGAAGAATTAATAGATAAACGATAAGC
 Seq3           ATGAATAATAAAATATACAGCATAGAAGAATTAATAGATAAA--ATAAGC
 Seq4           ATGAATAAAAAAACATATAGCATAGAAGAATTAATAGATAAA--ATAAGT
 Seq5           ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAAC-ATAAGC
 Seq6           ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAA--ATAAGT
                ******** ** * *** *************** **** ***  *****

OUTPUT:

 Seq1           ATGAATAAAAAGATATATAGCATAGAAGAATTAGTAGATAAA--ATAAGT
 Seq2           .................C...............A........CG.....C
 Seq3           ........T..A.....C...............A...............C
 Seq4           ...........A.C...................A................
 Seq5           ...........A.....................A....C...C......C
 Seq6           ...........A.....................A....C...........

=head2 --numseq, -n

Get number of sequences in alignment

Usage: bioaln -n <alignment_file>

=head2 --output, -o

Output file format (see Bio::AlignIO for supported formats). By default, this is 'clustalw'.

Usage: bioaln -o 'format'

=head2 --pick, -p

Pick sequences based on their id. Option takes a comma-separated list of ids.

Usage: bioaln -p 'seq_id_1, seq_id_2, ... , seq_id_n' <alignment_file>

=head2 --refseq, -r
 
Change the reference sequence to be seq_id.

Usage: bioaln -r 'seq_id' <alignment_file>

=head2 --slice, -s

Get a slice of the alignment.

Using a '-' character in the first or second position defaults to the beginning or end, respectively. Therefore specifying -s'-,-' is the same as grabbing the whole alignment.

Usage: bioaln -s 'min,max' <alignment_file>

-s'20,80' or --slice'20,80' or -s='20,80' or --slice='20,80'   Slice from position 20 to 80, inclusive.
-s'-,80'  Slice from beginning up to, and including position 80
-s'20,-'  Slice from position 20 up to, and including, the end of the alignment

NOTE: --slice'-,x' (where x is '-' or a position) does NOT work. Use --slice='-,x' instead.

=head2 --uniq, -u

Extract the alignment of unique sequences.

Usage: bioaln -u <alignment_file>

EXAMPLE: bioaln -u input.aln

INPUT:

 seq1                  ATGAATAAAAAGATATATAGCATAGAAGAATTAGTAGATAAA--ATAAGT
 seq11                 ATGAATAAAAAGATATATAGCATAGAAGAATTAGTAGATAAA--ATAAGT
 seq2                  ATGAATAAAAAGATATACAGCATAGAAGAATTAATAGATAAACGATAAGC
 seq3                  ATGAATAATAAAATATACAGCATAGAAGAATTAATAGATAAA--ATAAGC
 seq4                  ATGAATAAAAAAACATATAGCATAGAAGAATTAATAGATAAA--ATAAGT
 seq5                  ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAAC-ATAAGC
 seq7                  ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAAC-ATAAGC
 seq6                  ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAA--ATAAGT
                       ******** ** * *** *************** **** ***  *****

OUTPUT:

 seq1	ST1
 seq11	ST1
 seq2	ST2
 seq3	ST3
 seq4	ST4
 seq5	ST5
 seq7	ST5
 seq6	ST6

 ST1                   ATGAATAAAAAGATATATAGCATAGAAGAATTAGTAGATAAA--ATAAGT
 ST2                   ATGAATAAAAAGATATACAGCATAGAAGAATTAATAGATAAACGATAAGC
 ST3                   ATGAATAATAAAATATACAGCATAGAAGAATTAATAGATAAA--ATAAGC
 ST4                   ATGAATAAAAAAACATATAGCATAGAAGAATTAATAGATAAA--ATAAGT
 ST5                   ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAAC-ATAAGC
 ST6                   ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAA--ATAAGT
                       ******** ** * *** *************** **** ***  *****

=head2 --varsites, -v

Extracts variable sites.

B<Used in conjunction with -g:> do not show sites with gaps in any sequence.

Usage: bioaln -v <alignment_file>

=head2 --window, -w
 
Calculate pairwise average sequence difference by windows (overlapping windows with fixed step of 1). Default value for window_size is 30.

Usage: bioaln -w 'window_size'[default is 30] <alignment_file>

=head2 --concat, -A

Usage: bioaln -A to-be-concatenated/*.aln

=head2 --conblocks, -B
 
Extract perfectly conserved blocks (PCBs, gap excluded) from an alignment, each to a new clustalw file. Default minimum length of PCB is 6 sites.

Usage: bioaln -B <alignment_file>

EXAMPLE: bioaln -B input.aln

INPUT:

 Seq1           ATGAATAAAAAGATATATAGCATAGAAGAATTAGTAGATAAA--ATAAGT
 Seq2           ATGAATAAAAAGATATACAGCATAGAAGAATTAATAGATAAACGATAAGC
 Seq3           ATGAATAATAAAATATACAGCATAGAAGAATTAATAGATAAA--ATAAGC
 Seq4           ATGAATAAAAAAACATATAGCATAGAAGAATTAATAGATAAA--ATAAGT
 Seq5           ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAAC-ATAAGC
 Seq6           ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAA--ATAAGT
                ******** ** * *** *************** **** ***  *****

OUTPUT:  files containing perfectly conserved blocks

 nuc.aln.slice-1.aln : file contents below. Site positions indicated after the '/'

 Seq1/1-8              ATGAATAA
 Seq2/1-8              ATGAATAA
 Seq3/1-8              ATGAATAA
 Seq4/1-8              ATGAATAA
 Seq5/1-8              ATGAATAA
 Seq6/1-8              ATGAATAA
                       ********
 nuc.aln.slice-19.aln:

 Seq1/19-33            AGCATAGAAGAATTA
 Seq2/19-33            AGCATAGAAGAATTA
 Seq3/19-33            AGCATAGAAGAATTA
 Seq4/19-33            AGCATAGAAGAATTA
 Seq5/19-33            AGCATAGAAGAATTA
 Seq6/19-33            AGCATAGAAGAATTA
                       ***************

 nuc.aln.slice-40.aln

 Seq1/40-47            AAAATAAG
 Seq2/40-47            AAAATAAG
 Seq3/40-47            AAAATAAG
 Seq4/40-47            AAAATAAG
 Seq5/40-47            AAAATAAG
 Seq6/40-47            AAAATAAG
                       ********

=head2 --consensus, -C

Add a consensus sequence to the end of the alignment with a certain threshold percent and id Consensus_<percent>. By default percent is 50.

Usage: bioaln -C 'percent' <alignment_file>

EXAMPLE: bioaln -C '90' input.aln

INPUT:

 Seq1                  MNNKIYSIEELIDKISMPVVAYAGEAKSFLREALEYAKNK
 Seq2                  MNKKTYSIEELIDKISMPVVAYSGEAKSFLREALEHAKNK
 Seq3                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq4                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq5                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq6                  MNKKIYSIEELVDKISMPVVAYSGEAKSFLREALEYAKNK
                       **:* ******:**********:************:****

OUTPUT:

 Seq1                  MNNKIYSIEELIDKISMPVVAYAGEAKSFLREALEYAKNK
 Seq2                  MNKKTYSIEELIDKISMPVVAYSGEAKSFLREALEHAKNK
 Seq3                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq4                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq5                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq6                  MNKKIYSIEELVDKISMPVVAYSGEAKSFLREALEYAKNK
 Consensus_90          MN?K?YSIEEL?DKISMPVVAY?GEAKSFLREALE?AKNK
                       ** * ****** ********** ************ ****

=head2 --erasecol, -E
 
Remove columns with gap in designated sequence.

Usage: bioaln -E 'seq_id' <alignment_file>

EXAMPLE: bioaln -E 'Seq5' input.aln

INPUT:

 Seq1           ATGAATAAAAAGATATATAGCATAGAAGAATTAGTAGATAAA--ATAAGT
 Seq2           ATGAATAAAAAGATATACAGCATAGAAGAATTAATAGATAAACGATAAGC
 Seq3           ATGAATAATAAAATATACAGCATAGAAGAATTAATAGATAAA--ATAAGC
 Seq4           ATGAATAAAAAAACATATAGCATAGAAGAATTAATAGATAAA--ATAAGT
 Seq5           ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAAC-ATAAGC
 Seq6           ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAA--ATAAGT
                ******** ** * *** *************** **** ***  *****

OUTPUT:

 Seq1           ATGAATAAAAAGATATATAGCATAGAAGAATTAGTAGATAAA-ATAAGT
 Seq2           ATGAATAAAAAGATATACAGCATAGAAGAATTAATAGATAAACATAAGC
 Seq3           ATGAATAATAAAATATACAGCATAGAAGAATTAATAGATAAA-ATAAGC
 Seq4           ATGAATAAAAAAACATATAGCATAGAAGAATTAATAGATAAA-ATAAGT
 Seq5           ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAACATAAGC
 Seq6           ATGAATAAAAAAATATATAGCATAGAAGAATTAATAGACAAA-ATAAGT
                ******** ** * *** *************** **** *** *****

=head2 --aln-index, -I

????

Usage: bioaln -I 'seq_id','position' <alignment_file>

=head2 --listids, -L

List all sequence ids

Usage: bioaln -L <alignment_file>

=head2 --permute-states, -M

Usage: bioaln -M <alignment_file>

=head2 --paml, -P

Usage: bioaln -P <alignment_file>

=head2 --resample, -R

Picks n random sequences from input alignment and produces a new alignment consisting of those sequences.

If n is not given, default is the number of sequences in alignment divided by 2, rounded down.

This functionality uses an implementation of Reservoir Sampling, based on the algorithm found here: http://blogs.msdn.com/b/spt/archive/2008/02/05/reservoir-sampling.aspx

Usage: bioaln -R 'n' <alignment_file>

EXAMPLE: bioaln -R4 input.aln

INPUT:

 Seq1                  MNNKIYSIEELIDKISMPVVAYAGEAKSFLREALEYAKNK
 Seq2                  MNKKTYSIEELIDKISMPVVAYSGEAKSFLREALEHAKNK
 Seq3                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq4                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq5                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq6                  MNKKIYSIEELVDKISMPVVAYSGEAKSFLREALEYAKNK
                       **:* ******:**********:************:****

OUTPUT:

 Seq2                  MNKKTYSIEELIDKISMPVVAYSGEAKSFLREALEHAKNK
 Seq3                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq4                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq6                  MNKKIYSIEELVDKISMPVVAYSGEAKSFLREALEYAKNK
                       **** ******:***********************:****

=head2 --shuffle-sites, -S

Make a shuffled (not bootstraped) alignment

Usage: bioaln -S <alignment_file>

EXAMPLE: bioaln -S input.aln

INPUT:

 Seq1                  MNNKIYSIEELIDKISMPVVAYAGEAKSFLREALEYAKNK
 Seq2                  MNKKTYSIEELIDKISMPVVAYSGEAKSFLREALEHAKNK
 Seq3                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq4                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq5                  MNKKIYSIEELIDKISMPVVAYSGEAKSFLREALEYAKNK
 Seq6                  MNKKIYSIEELVDKISMPVVAYSGEAKSFLREALEYAKNK
                       **:* ******:**********:************:****

OUTPUT:

 Seq1                  VIEELKYEKAAEAFIPNISEDASGKIRLKLMSVNAYKMYN
 Seq2                  VIEELKYEKAAEAFIPNISEDASGKTRLKLMSVKSYKMHN
 Seq3                  VIEELKYEKAAEAFIPNISEDASGKIRLKLMSVKSYKMYN
 Seq4                  VIEELKYEKAAEAFIPNISEDASGKIRLKLMSVKSYKMYN
 Seq5                  VIEELKYEKAAEAFIPNISEDASGKIRLKLMSVKSYKMYN
 Seq6                  VIEELKYEKAAEAFVPNISEDASGKIRLKLMSVKSYKMYN
                       **************:********** *******::***:*

=head2 --third-sites, -T

Usage: bioaln -T <alignment_file>

=head2 --uppercase, -U

Make an uppercase alignment.

Usage: bioaln -U <alignment_file>

=head1 REQUIRES

Perl 5.100, Modern::Perl, BioPerl

=head1 FEEDBACK

=head2 Support

Please see project wiki page https://github.com/bioperl/bp-utils/wiki for documentation and use cases.

=head2 Report bugs & Contribute

Please email weigang@genectr.hunter.cuny.edu.

=head1 CONTRIBUTORS

 William McCaig <wmccaig at gmail dot com
 Che Martin <che dot l dot martin at gmail dot com>
 Yoezen Hernandez <yzhernand at gmail dot com>
 Levy Vargas <levy dot vargas at gmail dot com>
 Weigang Qiu <weigang at genectr dot hunter dot cuny.edu> (Maintainer)

=cut

##################### End ##########################
